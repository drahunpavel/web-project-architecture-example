video 2
если отправляем статус, нужно сразу отправлять метод или send, или end - res.status(401).end();

webserver.use(express.urlencoded({extended:true})); 
миддлварь urlencoded раскодировала данные POST-запроса и положила в req.body

fs.openSync(logFilePath, 'a+') а+ - значит дописать в файл

res.setHeader("X-XSS-Protection", "0"); // добавляем в ответ специальный заголовок, чтобы отключить защитный механизм в Chrome

функция escapeHTML преобразует все спец символы

 res.status(400).end(); возвращает статус 400

 пакет cress-env - пакет для установки переменной среды

 в районе 1-00 рассказывает о dev\prod  режимах

 32-30 осталось

 3540 - парсеры входных данных

 req.on - подписка на запрос

-------------------------------------------------------------------video 3-------------------------------------------------------------------
 res.locals - стандартное место, где можно хранить временные данные для дальнейшей обработки (3545)

 пакет multer (3550). отправка файлов
URLsearchparams работет только с form-urlencoded, а Formdata работает с multipartFromData

content-Dispositipon - трактует вложенный файл (3560)

отдает файлы (3570) Поток чтения из файла. readSream.pipe(res)

двоичные данные  (3580)
http://fe.it-academy.by/ViewSlides.php?slide=13129&lect=65

CORS (3585)
https://expressjs.com/en/resources/middleware/cors.html cors.middleware

1-44 начинает про экспресс
пути к файлу, работа с русскими урлами (4022)
проверка через регулярку на .html (4025)
по увсловию возвращаются content-type (4028)
правильная раздача статики (4030)
(4032) раздача статики и примение миделвары на логирование

-------------------------------------------------------------------video 4-------------------------------------------------------------------
в get не забывать отключать кэширование. Прокисший кэш - 304, eTag
когда приходит запрос, считаем его e-tag и сверяем с if-none-match, если совпадают, отдаем 304
example 4028 - e-tag, кэширование
example 4036 сжатие изображений
чтобы в гит записать пустую папку, нужно указать в ней .gitkeep
example 4073 сжатие изображения, обработка повтороного запроса, пока картинка не сформировалась
почитать о Promise
example 4039 возвращает 404, если нет файла
example 4040 скачиваение файла с бэка
куки парсер
example 4082#4083 отдает большой файл синхронно и асихрнонно
example 4510 - реверсивное проксирование. Можно использовать как дз
example 4533 пакет helmet
example 4542 шаблонизатор

миделварь helmet - добавляет заголовки безопасности
Пакет compression — middleware для express, сжимает отдаваемые веб-сервером клиенту ответы.


5536 - промисификация
5546 - таймер, построеный на EventEmitter
5563 - module.exports
5564 - require в цикле. (импорт происходит 1 раз)
5574 - интерфейс общения с консолью
5577 - createInterface
5590 - чтение файла из буфера. Длина буффкра - это кол-ва байт в буффере
пакет iconv - пакет для кодировок
5610 - работа с операционной системой
5622 - ошибка в асинхроной записи гиф файла, помогла синхронная запись appendFile -> appendFileSync
5632/5633 - пример ws
socket.io - пакет вебсокетов для кросбраузерности 

-------------------------------------
5622 примеры записи файлов 
http_get_stream -> самый надежный способ записи файлов 
'end' - клиент передал все данные, файл еще не закрыт
'close' - файл полностью записан и закрыт
http_get_pipe аналог предыдущему варианту
TaskQueue - очередь задач
5640 пакет nodemailer (Почта)
removeTags - функция удаляет все теги

--------------------------------------------БД
6005 пакеты для SQL
HeidiSQL — визуальный инструмент для удобной работы с БД MySQL
сначала черех xaamp запускаем сервер с MySQL, затем запускаем HeidiSQL

6010. SQL-запросы чтения (выбора) строк
6012. SQL-запросы изменения строк
6060. Работа с MySQL под Linux тестовый запрос к базе данных
6082. Запросы к базе через колбэки
6086. пул соедениея в бд

здесь примеры CRUD и REST. Разница и примеры 1:55